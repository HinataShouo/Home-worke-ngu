#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <assert.h>

int Array[2000][2000] = { 0 };
int ArrayOfEntry[2000] = { 0 };
int ResultArray[2000] = { 0 };
int k = 0;

void topSort(int N) {
	for (int i = 1; i <= N + 1; i++) {
		if (k == N)
			return;
		if (i == N + 1)
			i = 1;
		if (ArrayOfEntry[i] == 0) {
			for (int j = 1; j <= N; ++j) {

				if (Array[i][j] > 0) {
					ArrayOfEntry[j]--;
					Array[i][j] = 0;
				}
			}
			ArrayOfEntry[i]--;
			ResultArray[k++] = i;
		}

	}
}


void print(int N) {
	for (int i = 0; i < N; i++)
		printf("%d ", ResultArray[i]);
}

int CheckInput(int N, int M) {
	if (N < 0 || N > 2000) {
		printf("bad number of vertices");
		return 0;
	}

	if (M < 0 || M >(N * (N + 1) / 2)) {
		printf("bad number of edges");
		return 0;
	}
	return 1;
}

int findCycle(int N) {
	int counter = 0;
	for (int i = 1; i <= N; ++i) {
		if (ArrayOfEntry[i] != 0) {
			counter += 1;
		}
	}
	if (counter == N) {
		return 0;
	}
	else {
		return 1;
	}
}

int main() {
	assert(freopen("in.txt", "r", stdin) != NULL);
	assert(freopen("out.txt", "w", stdout) != NULL);

	int N, M;
	int CounterLines = 0;
	if (scanf("%d%d", &N, &M) != 2) {
		printf("bad number of lines");
		return 0;
	}

	if (!CheckInput(N, M)) {
		return 0;
	}
	CounterLines += 2;

	int StartVertex, EndVertex;
	for (int i = 0; i < M; i++) {
		if (scanf("%d%d", &StartVertex, &EndVertex) != 2) {
			printf("bad number of lines");
			return 0;
		}
		CounterLines += 1;
		if (StartVertex == EndVertex) {
			printf("bad vertex");
			break;
		}
		Array[StartVertex][EndVertex] = 1;
		ArrayOfEntry[EndVertex]++;
	}

	if (CounterLines < M + 2) {
		printf("bad number of lines");
		return 0;
	}

	if (!findCycle(N)) {
		printf("impossible to sort");
		return 0;
	}

	topSort(N);
	print(N);

	return 0;
}
